// Generated by CoffeeScript 1.4.0
(function() {

  this.Sensocamera.SensorManager = (function() {
    var checkSensorsTable, db, record, recordPeriod, recordValues, sensorEnum, sensorValues, sensors, setupAccelerometer, setupArduino, setupCompass, setupLocation, updatePeriod;

    sensors = [];

    sensorEnum = null;

    db = null;

    record = false;

    recordPeriod = 3000;

    updatePeriod = 1000;

    sensorValues = {};

    checkSensorsTable = function(sensorId) {
      return db.transaction(function(tx) {
        return tx.executeSql("SELECT * FROM SENSORS");
      }, function(error) {
        console.log(error);
        return db.transaction(function(tx) {
          return tx.executeSql("CREATE TABLE SENSORS(id integer primary key, name text, at text, value text)");
        });
      }, function(success) {
        return console.log("We already have SENSORS table, congratulations");
      });
    };

    recordValues = function() {
      var currentDate, finalResult, result, sensorName, sensorValue, timeStamp;
      setTimeout(recordValues, recordPeriod);
      if (!record) {
        return;
      }
      currentDate = new Date();
      timeStamp = currentDate.toISOString();
      finalResult = "";
      for (sensorName in sensorValues) {
        sensorValue = sensorValues[sensorName];
        result = "SELECT '" + sensorName + "', '" + timeStamp + "', '" + sensorValue + "' UNION ALL ";
        finalResult += result;
      }
      finalResult = finalResult.slice(0, -11);
      db.transaction(function(tx) {
        var executionString;
        executionString = "INSERT INTO SENSORS(name, at, value) " + finalResult;
        console.log(executionString);
        return tx.executeSql(executionString);
      }, function(error) {
        console.log(error);
        return console.log("Can't record");
      }, function(success) {
        return console.log("Data recorded");
      });
      return sensorValue;
    };

    setupAccelerometer = function() {
      var elementX, elementY, elementZ;
      elementX = $("#accelerometerX")[0];
      elementY = $("#accelerometerY")[0];
      elementZ = $("#accelerometerZ")[0];
      return navigator.accelerometer.watchAcceleration(function(acceleration) {
        sensorValues.accelerometerX = acceleration.x;
        sensorValues.accelerometerY = acceleration.y;
        sensorValues.accelerometerZ = acceleration.z;
        elementX.innerHTML = sensorValues.accelerometerX;
        elementY.innerHTML = sensorValues.accelerometerY;
        return elementZ.innerHTML = sensorValues.accelerometerZ;
      }, function(error) {
        return console.log("Error: Can't access accelerometer");
      }, {
        frequency: updatePeriod
      });
    };

    setupArduino = function() {
      var adk, gasElement, humidityElement, lightElement, pressureElement, temperatureElement;
      gasElement = $("#gas")[0];
      temperatureElement = $("#temperature")[0];
      pressureElement = $("#pressure")[0];
      humidityElement = $("#humidity")[0];
      lightElement = $("#light")[0];
      adk = new window.Sensocamera.ADKBridge();
      return adk.watchAcceleration(function(success) {
        if (success === null || success === void 0) {
          return;
        }
        sensorValues.gas = success.gas;
        sensorValues.temperature = success.temperature;
        sensorValues.pressure = success.pressure;
        sensorValues.humidity = success.humidity;
        sensorValues.light = success.light;
        sensorValues.sound = success.sound;
        gasElement.innerHTML = success.gas;
        temperatureElement.innerHTML = success.temperature;
        pressureElement.innerHTML = success.pressure;
        humidityElement.innerHTML = success.humidity;
        return lightElement.innerHTML = success.light;
      }, function(error) {
        return error;
      }, updatePeriod);
    };

    setupCompass = function() {
      var compassElement;
      compassElement = $("#compass")[0];
      return navigator.compass.watchHeading(function(compass) {
        return compassElement.innerHTML = compass.magneticHeading;
      }, function(error) {
        return console.log(error);
      }, [
        {
          frequency: updatePeriod
        }
      ]);
    };

    setupLocation = function() {
      var altElement, headElement, latElement, longElement;
      latElement = $("#locationLat")[0];
      longElement = $("#locationLong")[0];
      altElement = $("#locationAlt")[0];
      headElement = $("#locationHead")[0];
      return navigator.geolocation.watchPosition(function(position) {
        console.log("Position Updated");
        sensorValues.locationLat = position.coords.latitude;
        sensorValues.locationLong = position.coords.longitude;
        sensorValues.locationAlt = position.coords.altitude;
        latElement.innerHTML = position.coords.latitude;
        longElement.innerHTML = position.coords.longitude;
        altElement.innerHTML = position.coords.altitude;
        console.log(position.coords.altitude);
        headElement.innerHTML = position.coords.heading;
        return console.log(position.coords.heading);
      }, function(error) {
        return console.log(error);
      }, {
        enableHighAccuracy: true
      });
    };

    function SensorManager(base, sensors) {
      var id, _i, _len;
      this.sensors = sensors;
      console.log("SensorManager Started");
      sensorEnum = window.Sensocamera.Sensors;
      db = base;
      checkSensorsTable();
      for (_i = 0, _len = sensors.length; _i < _len; _i++) {
        id = sensors[_i];
        sensorValues[id] = 0;
      }
      setupAccelerometer();
      setupArduino();
      setupCompass();
      setupLocation();
      setTimeout(recordValues, recordPeriod);
      console.log("SensorManager Initialized");
    }

    SensorManager.prototype.syncSensor = function(feedId, sensorId) {
      console.log("Syncing sensors");
      db.transaction(function(tx) {
        return tx.executeSql("SELECT at, value FROM SENSORS WHERE name='" + sensorId + "'", [], function(tx, sqlResult) {
          var data, i;
          if (sqlResult.rows.length <= 0) {
            return false;
          }
          data = (function() {
            var _i, _ref, _results;
            _results = [];
            for (i = _i = 0, _ref = sqlResult.rows.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
              _results.push(sqlResult.rows.item(i));
            }
            return _results;
          })();
          console.log(JSON.stringify(data));
          return cosm.datapoint["new"](feedId, sensorId, {
            "datapoints": data
          }, function(res) {
            console.log(res);
            if (res.status === 200) {
              return console.log("Delete stuff here");
            } else {
              return false;
            }
          });
        }, function(error) {
          console.log(error);
          return console.log("Looks like we have some problems with " + sensorId + " data");
        });
      });
      return true;
    };

    SensorManager.prototype.clearData = function() {
      console.log("Clearing Data");
      return db.transaction(function(tx) {
        return tx.executeSql("DELETE FROM SENSORS");
      });
    };

    SensorManager.prototype.startRecord = function() {
      return record = true;
    };

    SensorManager.prototype.stopRecord = function() {
      return record = false;
    };

    return SensorManager;

  })();

}).call(this);
