// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Sensocamera.ExternalSensor = (function() {
    var START_ACTION, STATE_FAILED, STATE_RUNNING, STATE_STARTING, STATE_STOPPED, STOP_ACTION;

    START_ACTION = "start";

    STOP_ACTION = "stop";

    STATE_STOPPED = 0;

    STATE_STARTING = 1;

    STATE_RUNNING = 2;

    STATE_FAILED = 3;

    ExternalSensor.prototype.currentState = STATE_STOPPED;

    ExternalSensor.prototype.refreshPeriod = 0;

    ExternalSensor.prototype.intervalAction = null;

    ExternalSensor.prototype.sensors = null;

    function ExternalSensor(sensorName) {
      this.sensorName = sensorName;
      this.setState = __bind(this.setState, this);

      this.callNativeFunction = __bind(this.callNativeFunction, this);

      this.testVis = __bind(this.testVis, this);

      this.setSensors = __bind(this.setSensors, this);

      this.watchData = __bind(this.watchData, this);

      this.setState(STATE_STARTING);
    }

    ExternalSensor.prototype.watchData = function(success, error, period) {
      var _this = this;
      this.setState(STATE_STARTING);
      this.refreshPeriod = period;
      return this.intervalAction = setInterval(function() {
        return success(_this.sensors);
      }, this.refreshPeriod);
    };

    ExternalSensor.prototype.setSensors = function(data) {
      return this.sensors = data;
    };

    ExternalSensor.prototype.testVis = function() {
      return console.log("LALALALA");
    };

    ExternalSensor.prototype.callNativeFunction = function(action, params) {
      var _this = this;
      console.log("Calling class " + this.sensorName);
      return cordova.exec(function(success) {
        if (_this.currentState === STATE_STARTING) {
          _this.setState(STATE_RUNNING);
        }
        return _this.sensors = success;
      }, function(error) {
        if (this.currentState === STATE_STARTING) {
          this.setState(STATE_FAILED);
          console.log("NAME: " + sensorName);
          console.log("EXEC ERROR");
          return console.log(error);
        }
      }, this.sensorName, action, params);
    };

    ExternalSensor.prototype.setState = function(state) {
      if (this.currentState === state) {
        return;
      }
      this.currentState = state;
      switch (this.currentState) {
        case STATE_STOPPED:
          this.callNativeFunction(STOP_ACTION, []);
          return clearInterval(intervalAction);
        case STATE_STARTING:
          return this.callNativeFunction(START_ACTION, []);
        case STATE_FAILED:
          return console.log("Failed");
      }
    };

    return ExternalSensor;

  })();

}).call(this);
